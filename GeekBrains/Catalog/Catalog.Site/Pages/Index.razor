@page "/"
@using Catalog.Site.Services
@inject IBooksCatalogClient BooksCatalogClient

<div class="mt-2 mb-2 col-8">
	<BooksSearchBar OnSearch="Search"/>
</div>

<div class="card col-3 bg-light">
	<span class="m-2"><b>Books</b>: @Books.Count</span>
</div>

<div style="display: flex">
	@if (IsLoading)
	{
		<span>Loading...</span>
	}
	else
	{
		<div class="flex-grow-1 card overflow-auto mt-4" style="height: 400px;">
			<Virtualize Items="@Books" Context="book">
				<BookView Book="@book" />
			</Virtualize>
		</div>
	}

	<div class="m-4 flex-grow-1">
		<RegisterBookForm OnBookGenerated="AddBook" />
	</div>
</div>

@code {
	private List<BookInfo> Books { get; set; } = new();
	private bool IsLoading { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender) await Search();
	}

	private async Task AddBook(StoreBooksRequest request)
	{
		await BooksCatalogClient.Store(request);
		var count = await BooksCatalogClient.CountStored(request.Book.Title);
		var book = Books.FirstOrDefault(b => b.Title == request.Book.Title);
		if (book is not null)
		{
			book.Amount = count;
			StateHasChanged();
			return;
		}

		book = request.Info();
		Books.Add(book);
		StateHasChanged();
	}

	private async Task Search(BookQueryForm? queryData = null)
	{
		IsLoading = true;

		IEnumerable<BookInfo> books;
		if (queryData is null or { IsEmpty: true })
		{
			books = await BooksCatalogClient.ListStored();
		}
		else
		{
			books = await BooksCatalogClient.Search(queryData.Title);
		}
		
		Books.Clear();
		Books.AddRange(books);

		IsLoading = false;
		StateHasChanged();
	}
}
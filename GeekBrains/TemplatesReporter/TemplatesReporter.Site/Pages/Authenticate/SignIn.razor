@using TemplatesReporter.Site.Services
@using Microsoft.AspNetCore.Components
@using TemplatesReporter.Site.Data
@using System.Security.Claims
@using TemplatesReporter.ApiClients
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject WebApiAuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject ProtectedLocalStorage _protectedLocalStorage
@inject AuthenticationService _authenticationService

<EditForm Model="@_credentials" OnValidSubmit="@ValidateUser">
	<div>
		<br /><br /><br /><br /><br />
	</div>
	<div>
		<h3 style="font-weight:bold; color:purple">Template mail sender login</h3>
	</div>
	<div>
		<br />
	</div>
	<div class="col-12 row">
		<input class="form-control col-12" @bind="_credentials.Login" placeholder="email address" />
	</div>
	<br />
	<div class="col-12 row">
		<input type="password" class="form-control col-12" @bind="_credentials.Password" placeholder="password" />
	</div>
	<br />
	<div class="col-12 row">
		<span class="col-12"></span>
		<input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
		<a href="/signup" class="col-3">Sign up</a>
	</div>
	<br />
	<div class="col-12 row" style="text-align:left; font-weight:bold">
		<span class="col-12">@LoginMessage</span>
	</div>
</EditForm>


@code {
	private Credentials _credentials = new();
	private string LoginMessage { get; set; }
	ClaimsPrincipal claimsPrincipal;

	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }

	protected override async Task OnInitializedAsync()
	{
		claimsPrincipal = (await AuthenticationStateTask).User;

		if (claimsPrincipal.Identity?.IsAuthenticated is true)
		{
			_navigationManager.NavigateTo("/index");
		}
	}

	private async Task<bool> ValidateUser()
	{
		var token = await _authenticationService.LoginAsync(_credentials);

		if (!string.IsNullOrEmpty(token))
		{
			await _authenticationStateProvider.MarkUserAsAuthenticated(token);
			_navigationManager.NavigateTo("/index");
		}
		else
		{
			LoginMessage = "Invalid username or password";
		}

		return await Task.FromResult(true);
	}
}